/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1beta1

import (
	"time"

	v1beta1 "github.com/kuberty/kuberdon/pkg/apis/registry/v1beta1"
	scheme "github.com/kuberty/kuberdon/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// RegistriesGetter has a method to return a RegistryInterface.
// A group's client should implement this interface.
type RegistriesGetter interface {
	Registries() RegistryInterface
}

// RegistryInterface has methods to work with Registry resources.
type RegistryInterface interface {
	Create(*v1beta1.Registry) (*v1beta1.Registry, error)
	Update(*v1beta1.Registry) (*v1beta1.Registry, error)
	UpdateStatus(*v1beta1.Registry) (*v1beta1.Registry, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1beta1.Registry, error)
	List(opts v1.ListOptions) (*v1beta1.RegistryList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta1.Registry, err error)
	RegistryExpansion
}

// registries implements RegistryInterface
type registries struct {
	client rest.Interface
}

// newRegistries returns a Registries
func newRegistries(c *KuberdonV1beta1Client) *registries {
	return &registries{
		client: c.RESTClient(),
	}
}

// Get takes name of the registry, and returns the corresponding registry object, and an error if there is any.
func (c *registries) Get(name string, options v1.GetOptions) (result *v1beta1.Registry, err error) {
	result = &v1beta1.Registry{}
	err = c.client.Get().
		Resource("registries").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of Registries that match those selectors.
func (c *registries) List(opts v1.ListOptions) (result *v1beta1.RegistryList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1beta1.RegistryList{}
	err = c.client.Get().
		Resource("registries").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested registries.
func (c *registries) Watch(opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Resource("registries").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a registry and creates it.  Returns the server's representation of the registry, and an error, if there is any.
func (c *registries) Create(registry *v1beta1.Registry) (result *v1beta1.Registry, err error) {
	result = &v1beta1.Registry{}
	err = c.client.Post().
		Resource("registries").
		Body(registry).
		Do().
		Into(result)
	return
}

// Update takes the representation of a registry and updates it. Returns the server's representation of the registry, and an error, if there is any.
func (c *registries) Update(registry *v1beta1.Registry) (result *v1beta1.Registry, err error) {
	result = &v1beta1.Registry{}
	err = c.client.Put().
		Resource("registries").
		Name(registry.Name).
		Body(registry).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *registries) UpdateStatus(registry *v1beta1.Registry) (result *v1beta1.Registry, err error) {
	result = &v1beta1.Registry{}
	err = c.client.Put().
		Resource("registries").
		Name(registry.Name).
		SubResource("status").
		Body(registry).
		Do().
		Into(result)
	return
}

// Delete takes name of the registry and deletes it. Returns an error if one occurs.
func (c *registries) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Resource("registries").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *registries) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Resource("registries").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched registry.
func (c *registries) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta1.Registry, err error) {
	result = &v1beta1.Registry{}
	err = c.client.Patch(pt).
		Resource("registries").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
